require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ProjectsController do

  let (:project) { FactoryBot.create(:project) }

  before(:each) do
    # We're testing access control in spec/models/user_spec.rb, so for this
    # suite we use a user with global permissions
    @user ||= FactoryBot.create(:admin)
    sign_in @user
  end

  describe "GET index" do
    it "assigns all projects as @projects" do
      get :index
      expect(assigns(:projects)).to include(project)
    end
  end

  describe "GET new" do
    it "assigns a new project as @project" do
      get :new
      expect(assigns(:project)).to be_a_new(Project)
    end
  end

  describe "GET edit" do
    it "assigns the requested project as @project" do
      get :edit, params: { id: project.id }
      expect(assigns(:project)).to eq(project)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Project" do
        expect {
          post :create, params: {project: {
            project_key: "test-project-a",
            title: "Test Project A"
          }}
        }.to change(Project, :count).by(1)
      end

      it "assigns a newly created project as @project" do
        post :create, params: {project: {
          project_key: "test-project-b",
          title: "Test Project B"
        }}
        expect(assigns(:project)).to be_a(Project)
        expect(assigns(:project)).to be_persisted
      end

      it "redirects to the created project" do
        post :create, params: {project: {
          project_key: "test-project-c",
          title: "Test Project C"
        }}
        expect(response).to redirect_to(edit_project_url(Project.last))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved project as @project" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Project).to receive(:save).and_return(false)
        post :create, params: { project: {} }
        expect(assigns(:project)).to be_a_new(Project)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Project).to receive(:save).and_return(false)
        post :create, params: { project: {} }
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested project" do
        # Assuming there are no other projects in the database, this
        # specifies that the Project created on the previous line
        # receives the :update message with whatever params are
        # submitted in the request.
        expect_any_instance_of(Project).to receive(:update).with(hash_including('title' => 'New Title'))
        put :update, params: { id: project.id, project: {'title': 'New Title'} }
      end

      it "assigns the requested project as @project" do
        put :update, params: { id: project.id, project: {} }
        expect(assigns(:project)).to eq(project)
      end

      it "redirects to the project" do
        put :update, params: { id: project.id, project: {} }
        expect(response).to redirect_to(edit_project_url(project))
      end
    end

    describe "with invalid params" do
      it "assigns the project as @project" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Project).to receive(:save).and_return(false)
        put :update, params: { id: project.id, project: {} }
        expect(assigns(:project)).to eq(project)
      end

      it "re-renders the 'edit' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        allow_any_instance_of(Project).to receive(:save).and_return(false)
        put :update, params: { id: project.id, project: {} }
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested project" do
      project = Project.create(project_key: "something-unique-123-abc")
      expect {
        delete :destroy, params: { id: project.id }
      }.to change(Project, :count).by(-1)
    end

    it "redirects to the projects list" do
      project = Project.create(project_key: "something-unique-123-abc")
      delete :destroy, params: { id: project.id }
      expect(response).to redirect_to(projects_url)
    end
  end

end

.question-hdr
  %h5.h5= "#{t("QUESTION")} ##{embeddable.question_index}"
.question-bd
  .question-txt
    != embeddable.drawing_prompt
    %div{:id => "image_question_#{embeddable.id}"}
      = form_for embeddable, :remote => true, :html => {:'data-type' => 'json', :class=> 'live_submit'} do |f|
        -# The src of this thumbnail image will be rewritten by javascript
        %img.snapshot_thumbnail{:src => embeddable.annotated_image_url, :width => '100%'}
        %br
        - if embeddable.prompt
          .text_prompt
            != embeddable.prompt
          -# this 'formatting' is duplicated in image_question_answers_controller
          .answer_text{ :data => { :raw => embeddable.answer_text } }
            = simple_format h(truncate(embeddable.answer_text, length:140))
        - if embeddable.is_shutterbug?
          %button.image_question.button.image_snapshot_button.take_snapshot{:type => 'button'}
            %i.fa.fa-camera
            %span.take_snapshot_label
              =t("TAKE_SNAPSHOT")
          %button.image_question.button.image_snapshot_button.replace_snapshot{:type => 'button'}
            %i.fa.fa-camera
            %span.replace_snapshot_label
              =t("REPLACE_SNAPSHOT")
        - elsif embeddable.is_drawing?
          %button.image_question.button.image_drawing_button.drawing_button{:type => 'button'}
            %i.fa.fa-pencil
            %span.make_drawing_label
              =t("MAKE_DRAWING")
        %button.image_question.button.image_snapshot_button.edit_answer{:type => 'button'}
          =t("EDIT")
        - if embeddable.require_image_url
          = f.hidden_field 'image_url', :id => "image_question_image_url_for_#{embeddable.id}"
        = f.hidden_field 'annotated_image_url', :id => "image_question_annotation_url_for_#{embeddable.id}"
        = f.hidden_field 'annotation', :id => "image_question_annotation_for_#{embeddable.id}"
        - unless embeddable.prompt.blank?
          = f.hidden_field 'answer_text', :id => "embeddable_image_question_answer_text_for_#{embeddable.id}"
        = prediction_button(embeddable,f)

%div.tmp_svg{:id => "sb_svg_src_#{embeddable.id}" }
.question{:id => "image_question_answer_form_#{embeddable.id}"}
  .image_gallery
    .title
    .instructions
      != embeddable.drawing_prompt
    .answer
    = form_for embeddable, :namespace => 'sketchily', :remote => true, :html => {:'data-type' => 'json', :class=> 'live_submit ignore_missing'} do |f|
      .image_block
        = f.sketchily :annotation, :id=>"image_question_annotation_for_#{embeddable.id}", :hide_rulers => true, :hide_menu => true, :hide_editor_panel => true, :hide_history_panel => true, :canvas_expansion => 1
        .under_image
          - unless embeddable.prompt.blank?
            .text_response
              .prompt.image_prompt!= embeddable.prompt
              = f.hidden_field :is_final, :class => 'hidden_is_final', :rows => "2", :placeholder => "Type answer here", :cols => "30"
              = f.text_area :answer_text, :class => 'answer', :rows => "2", :placeholder => "Type answer here", :cols => "30"
          %button.button.image_done_button{ :type => 'button' }
            %i.fa.fa-check.btn
              =t("DONE")
          %button.button.image_cancel_button{ :type => 'button' }
            %i.fa.fa-cancel.btn
              =t("CANCEL")

- content_for :extra_javascript do
  :javascript
    $(document).ready(function() {
      window.iq = new ImageQuestion(#{embeddable.id});
    });

- embeddable_string = "#{embeddable.class.to_s.demodulize.underscore}_#{embeddable.id}"
- check_button_string = "check_button_#{embeddable_string}"
.question-hdr
  %h5.h5= "#{t("QUESTION")} ##{embeddable.question_index}"
.question-bd{ :id => embeddable_string }
  .question-txt
    != embeddable.prompt
  = form_for embeddable,
    :remote => true,
    :html => {:'data-type' => 'json', :class=> 'live_submit'} do |f|
    %fieldset.options
      - if embeddable.show_as_menu
        = f.select :answers, options_from_collection_for_select(embeddable.choices, 'id', 'choice', (embeddable.answers.empty? ? nil : embeddable.answers.last.id) ),
                             { :include_blank => t("PICK_ONE")}, {:class => "screen-only", :data => {:button_id => check_button_string} }
        %ul.print-only
          - embeddable.choices.each do |choice|
            %li= choice.choice
      - else
        .choice-container{:class => embeddable.layout}
          - embeddable.choices.each do |choice|
            = render :partial => "embeddable/multiple_choices/show_choice", :locals => {:embeddable => embeddable, :choice => choice, :check_button_string => check_button_string, :form => f}
    - if embeddable.enable_check_answer
      %input{ :class => 'button check_answer_button',
              :type => 'button',
              :id => check_button_string,
              :value => 'Check answer',
              :disabled => (embeddable.answers.length == 0),
              :data => { :check => embeddable_string } }
    = prediction_button(embeddable,f)
- content_for :extra_javascript do
  :javascript
    $(document).ready(function() {
      new EmbeddableQuestionsLogging({
        type  :"#{embeddable.class.to_s.demodulize.underscore}",
        id    :"#{embeddable.id}",
        dom_id:"#{embeddable_string}"
      });
    });
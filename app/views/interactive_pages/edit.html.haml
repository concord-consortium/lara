= content_for :session do
  #session
    = render :partial => 'shared/session'
= content_for :title do
  = "Edit #{@page.name}"
= content_for :nav do
  .breadcrumbs
    %ul
      %li= link_to "Home", root_path
      %li
        \/
        = link_to 'All Activities', activities_path
      %li
        \/
        = link_to @activity.name, edit_activity_path(@activity)
      %li
        \/
        = @page.name

%div{:class => ["content", "editing", @page.layout.match(/^r-/) ? "stacked-right" : nil]}
  .page-nav
    - if @page.higher_item
      %a{:class => 'previous', :href => edit_activity_page_path(@activity, @page.higher_item)}
        ! &nbsp;
    - else
      %a{:class => 'previous disabled'}
        ! &nbsp;
    - page_counter = 1
    - @activity.pages.each do |p|
      = link_to page_counter, edit_activity_page_path(@activity, p), :class => (p === @page) ? 'active' : ''
      - page_counter = page_counter + 1
    = link_to '+', new_activity_page_path(@activity), {:title => "Add another page to #{@activity.name}"}
    - if @page.lower_item
      %a{:class => 'next', :href => edit_activity_page_path(@activity, @page.lower_item)}
        ! &nbsp;
    - else
      %a{:class => 'next disabled'}
        ! &nbsp;

  %h1.title
    = @activity.name

  = render :partial => "publications/publication_failures", :locals =>{ :publication => @activity}

  %h2.question
    = editable_field @page, :name, { :placeholder => 'page title' }
    %span.preview
      = link_to "Preview", preview_activity_page_path(@activity, @page), :target => 'new'
  %div.edit_interactive_page
    = form_for @page do |f|
      = f.select :layout, options_for_select(InteractivePage::LAYOUT_OPTIONS.map { |l| [l[:name], l[:class_val]] }, @page.layout), {},  { :onchange => 'this.form.submit();', :title => 'Page layout' }
      = f.select :embeddable_display_mode, InteractivePage::EMBEDDABLE_DISPLAY_OPTIONS, {}, { :onchange => 'this.form.submit();', :title => 'Display of embeddables: stacked for scrolling, or carousel for sequential display' }
      %label
        -# There is no typical :onchange => 'this.form.submit();' handler, as we also need confirmation dialog.
        -# It's handled separately in the JavaScript block at the end of this partial.
        = f.check_box :is_hidden, :id => 'hide-page-checkbox'
        Hidden
      %p.page-section-controls#page-section-controls
        %label
          = f.check_box :show_introduction, :disabled => @page.is_completion, :onchange => 'this.form.submit();'
          Page introduction
        %label
          = f.check_box :show_info_assessment, :disabled => @page.is_completion, :onchange => 'this.form.submit();'
          Info/Assessment block
        %label
          = f.check_box :show_interactive, :disabled => @page.is_completion, :onchange => 'this.form.submit();'
          Interactive box
        %label
          = f.check_box :show_sidebar, :disabled => @page.is_completion, :onchange => 'this.form.submit();'
          Page sidebar text
        %label
          = f.check_box :is_completion, :onchange => 'this.form.submit();'
          Page is Completion page
        - InteractivePage.registered_additional_sections.each do |s|
          %label
            = f.check_box "show_#{s[:name]}", :disabled => @page.is_completion, :onchange => 'this.form.submit();'
            = s[:label]

  - if @page.is_completion
    - # TODO: Display preview of student completion page.
    =render :partial => "edit_completion"
  - else
    - if @page.show_introduction
      = text_editor @page, :text, { header: 'Introduction' }
    .text
      - if @page.show_info_assessment
        #info_assess_block.questions
          %h2 Info/Assess
          = form_for @page do |f|
            - if @page.has_attribute?('toggle_info_assessment')
              %label
                = f.check_box :toggle_info_assessment, :onchange => 'this.form.submit();'
                Allow toggling of column
          %button.show-hide-toggle
            Close All
          = form_tag add_embeddable_activity_page_path(@activity, @page), :class => 'embeddables-form' do
            .select_container
              = embeddable_selector
            = hidden_field_tag :approved_script_id
            = hidden_field_tag :component_label
            = submit_tag 'Add Embeddable', {id: 'add_embeddable_button'}
          .embeddables_list.sortable_embeddables
            - @page.section_embeddables(nil).each do |e|
              - if e.show_in_edit?
                - tracked = e.respond_to?(:tracked_question) && e.tracked_question
                - tracked_class = tracked ? 'tracked' : ''
                .authorable.accordion_embeddable{:id => "embeddable_#{e.id}.#{e.class.to_s}", :class => tracked_class}
                  %h3.embeddable_heading
                    %span.embeddable_title
                      - if e.respond_to? :name
                        - if !e.name.nil? && !e.name.empty?
                          #{e.name}
                        - else
                          #{e.class.model_name.human.titleize}
                      - else
                        #{e.class.model_name.human.titleize}
                    %span.sortable-icon.ui-icon.ui-icon-arrowthick-2-n-s
                  = render :partial => "#{e.class.name.underscore.pluralize}/author", :locals => { :embeddable => e, :page => @page, :allow_hide => true }
      -# Additional sections are dynamically loaded, based on .visible_sections value:
      - @page.visible_sections.each do |s|
        = render :partial => "#{s[:dir]}/author", :locals => { :page => @page, :section_name => s[:name], :section_label => s[:label], :allow_hide => false }
    - if @page.show_interactive
      %div{:class => (@page.show_info_assessment ? 'other' : 'other full-width')}
        #interactive_box.questions
          %h2 Interactive Box
          %button.show-hide-toggle
            Close All
          = form_tag add_embeddable_activity_page_path(@activity, @page), :class => 'embeddables-form' do
            = embeddable_interactives_selector
            = hidden_field_tag :section, InteractivePage::INTERACTIVE_BOX
            = submit_tag 'Add Interactive'
          .embeddables_list.sortable_embeddables
            - @page.interactive_box_visible_embeddables.each do |interactive|
              .authorable.accordion_embeddable{:id => "embeddable_#{interactive.id}.#{interactive.class.to_s}"}
                %h3.embeddable_heading
                  %span.embeddable_title
                    - if interactive.respond_to? :name
                      - if !interactive.name.nil? && !interactive.name.empty?
                        #{interactive.name}
                      - else
                        #{interactive.class.model_name.human.titleize}
                    - else
                      #{interactive.class.model_name.human.titleize}
                  %span.sortable-icon.ui-icon.ui-icon-arrowthick-2-n-s
                = render :partial => "#{interactive.class.name.underscore.pluralize}/author", :locals => {:embeddable => interactive, :page => @page, :allow_hide => false}
    - if @page.show_sidebar
      %div{style: 'clear: both;'}
        = text_editor @page, :sidebar, { editable_header: true, header_prop: :sidebar_title }
    = render :partial => "trackedQuestionSelector", locals: {page: @page, activity: @activity}

:javascript
  $(function() {
    if ((navigator.userAgent.indexOf("MSIE"))!=-1){
      $('#page-section-controls').removeAttr("id");
    }
    // Hide page checkbox handling.
    var confirmHideMessage = "Are you sure you want to hide this page? You will lose data from #{pluralize(@activity.active_runs, "learner")} that have run this activity.";
    var activeRuns = #{@activity.active_runs};
    $('#hide-page-checkbox').on('change', function(e) {
      if (this.checked && activeRuns > 0) {
        if (confirm(confirmHideMessage)) {
          this.form.submit();
        } else {
          this.checked = false;
        }
      } else {
        this.form.submit();
      }
    });

    // set the hidden plugin fields when embeddable plugins are selected
    $('#embeddable_type').on('change', function() {
      var selected = $(this).find(':selected');
      $('#approved_script_id').val(selected.data('approved-script-id') || "")
      $('#component_label').val(selected.data('component-label') || "")
    })

    // set the hidden plugin fields when wrapped embeddable plugins are selected
    $('.wrapped-embeddable-type').on('change', function() {
      var $this = $(this);
      var selected = $this.find(':selected');
      var form = $this.closest("form");
      form.find('[name=approved_script_id]').val(selected.data('approved-script-id') || "")
      form.find('[name=component_label]').val(selected.data('component-label') || "")
    })
  });

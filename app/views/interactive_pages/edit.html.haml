.page-section-controls
  %ul
    %li Page introduction
    %li Page sidebar text
    %li Interactive box
    %li Info/Assessment block
=# TODO: Deal with pagination. This seems like a good place to handle "Add page."
- next_page = nil unless defined?(next_page)
- previous_page = nil unless defined?(previous_page)
%div{:class => ["content", @page.theme]}
  .page-nav
    - if previous_page
      %a{:class => 'previous', :href => edit_activity_page_path(@activity, previous_page)}
        ! &nbsp;
    - else
      %a{:class => 'previous disabled'}
        ! &nbsp;
    - page_counter = 1
    - @activity.pages.each do |p|
      = link_to page_counter, edit_activity_page_path(@activity, p), :class => (p === @page) ? 'active' : ''
      - page_counter = page_counter + 1
    - if next_page
      %a{:class => 'next', :href => edit_activity_page_path(@activity, next_page)}
        ! &nbsp;
    - else
      = link_to '+', new_activity_page_path(@activity), {:title => "Add another page to #{@activity.name}", :class => 'next'}

  %h1.title
    = @activity.name
  %p.question
    Editing
    = editable_with_trigger @page, :name, {:edit_string => 'Edit page name'}
    = field_set_tag 'Page Appearance' do
      = editable_with_trigger @page, :theme, {:edit_string => 'Edit page theme'}
    .text
      - if @page.show_introduction
        .instructions
          = editable_with_trigger @page, :text, { :edit_string => 'Edit page introduction', :type => 'wysiwyg', :rows => 5, :cols => 47, :submit => 'OK', :cancel => 'Cancel', :onblur => 'ignore', :wysiwyg => { :controls => { :html => { :visible => true } } } }
      - if @page.show_info_assessment
        .questions
          = form_tag :controller => 'interactive_pages', :action => 'add_embeddable' do
            = select_tag :embeddable_type, options_for_select(SUPPORTED_EMBEDDABLES.map { |e| [e[/::(\w+)$/,1], e] })
            = submit_tag 'Add Embeddable'
          - @page.embeddables.each do |e|
            - e_type = e.class.name.underscore
            = render :partial => "#{e_type.pluralize}/author", :locals => { :embeddable => e, :page => @page }
    .other
      - if @page.show_interactive
        - @page.interactives.each do |interactive|
          - i_type = interactive.class.name.underscore
          = render :partial => "#{i_type.pluralize}/author", :locals => {:interactive => interactive}
        = link_to "Add interactive", new_page_mw_interactive_path(@page) unless @page.interactives.length > 0
        -# TODO: When we're supporting more than one interactive, the above conditional (unless...) should come out
    - if @page.show_sidebar
      .sidebar
        = editable_with_trigger @page, :sidebar, { :edit_string => 'Edit sidebar text', :type => 'wysiwyg', :rows => 10, :cols => 80, :submit => 'OK', :cancel => 'Cancel', :onblur => 'ignore', :wysiwyg => { :debug => false } }

  =# javascript_tag("focus_first_field();");

  %ul.tasks
    %li= link_to "See this page", activity_page_path(@activity, @page), :target => 'new'
    %li= link_to "Return to editing #{@activity.name}", edit_activity_path(@activity)
    %li= link_to "Add another page to #{@activity.name}", new_activity_page_path(@activity)
    %li= link_to "All activities", activities_path
- unless plugin_loaded(plugin.url)
  = content_for :external_scripts do
    %script{src:plugin.url}

- if plugin.version < 2
  -# Version 1
  - output_id = "output-#{plugin.id}"
  .plugin-output{id: output_id}
  - runtime_div_selector = "##{output_id}"
  :javascript
    // Begin script for #{plugin.name}
    $(document).ready( function() {
      env = {
        name: '#{plugin.name}',
        scriptLabel: '#{plugin.label}',
        scriptUrl: '#{plugin.url}',
        pluginId: '#{plugin.id}',
        config: '#{ escape_javascript(plugin.author_data) }',
        div: $('#{runtime_div_selector}')[0]
      }
      console.log("Adding script #{plugin.label} with V1 (ExternalScript) API");
      ExternalScripts.init('#{plugin.label}', env);
    });
- else
  -# Version 2
  - plugin_learner_state = PluginLearnerState.find_or_create(plugin, @run)
  - learner_state = plugin_learner_state.state
  -# wrapped_embeddable template variable might be undefined when the activity level plugins are rendered
  - wrapped_embedd = defined?(wrapped_embeddable) && wrapped_embeddable
  - if wrapped_embedd
    -# Plugin is wrapping some other embeddable. It's injected into its div and gets question content.
    - runtime_div_selector = "##{wrapped_embedd.embeddable_dom_id}"
    - wrapped_selector = "#{runtime_div_selector} .embeddable-container"
  - else
    -# Typical case. Plugin renders its own output.
    - output_id = "output-#{plugin.id}"
    .plugin-output{id: output_id}
    - runtime_div_selector = "##{output_id}"
    - wrapped_selector = nil
  - firebase_jwt_url = api_v1_get_firebase_jwt_url(@run.id, {firebase_app: '_FIREBASE_APP_'})
  - interactive_state_url = nil
  - if wrapped_embedd && wrapped_embedd.respond_to?(:interactive_run_states)
    - irs = InteractiveRunState.by_run_and_interactive(@run, wrapped_embedd)
    - interactive_state_url = irs && irs.key ? api_v1_show_interactive_run_state_path({key: irs.key}) : ''
  - if wrapped_embedd && wrapped_embedd.respond_to?(:click_to_play) && wrapped_embedd.click_to_play
    - click_to_play_id = dom_id_for(wrapped_embedd, :click_to_play)
  - else
    - click_to_play_id = nil
  :javascript
    // Begin script for #{plugin.name}
    $(document).ready(function() {
      // It's impossible to get type checking here, but object below MUST always implement IEmbeddableContext interface
      // defined at lara-plugin-api/helpers/runtime-context.ts.
      var embeddableContext = #{!wrapped_embedd ? 'null' : "{
        container: $('#{wrapped_selector}')[0],
        laraJson: #{(LaraSerializationHelper.new).export(wrapped_embedd).to_json},
        interactiveStateUrl: #{interactive_state_url ? "'#{escape_javascript(interactive_state_url)}'" : 'null'},
        clickToPlayId: #{click_to_play_id ? "'#{escape_javascript(click_to_play_id)}'" : 'null'}
      }"};
      // It's impossible to get type checking here, but object below MUST always implement IPluginContext interface
      // defined at lara-plugin-api/helpers/runtime-context.ts.
      var pluginContext = {
        name: '#{plugin.name}',
        url: '#{plugin.url}',
        pluginId: #{plugin.id},
        authoredState: #{plugin.author_data ? "'#{ escape_javascript(plugin.author_data) }'" : 'null'},
        learnerState: #{learner_state ? "'#{ escape_javascript(learner_state) }'" : 'null'},
        learnerStateSaveUrl: `#{escape_javascript(api_v1_update_plugin_learner_state_url(plugin.id, @run.id))}`,
        container: $('#{runtime_div_selector}')[0],
        runId: #{@run.id},
        remoteEndpoint: #{@run.remote_endpoint ? "'#{escape_javascript(@run.remote_endpoint)}'" : 'null'},
        userEmail: #{@run.user && @run.user.email ? "'#{escape_javascript(@run.user.email)}'" : 'null'},
        classInfoUrl: #{@run.class_info_url ? "'#{escape_javascript(@run.class_info_url)}'" : 'null'},
        firebaseJwtUrl: '#{escape_javascript(firebase_jwt_url)}',
        wrappedEmbeddable: embeddableContext
      }
      console.log("Adding script #{plugin.label} with V2 LARA Plugin API")
      LARA.initPlugin('#{plugin.label}', pluginContext);
    });

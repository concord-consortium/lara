- if plugin.version == 3
  - v3_plugin_label = "plugin#{plugin.approved_script_id}"
  - output_id = "plugin_authoring_output"
  - wrapped_id = "wrapped_embeddable"
  - show_wrapped_embeddable = @embeddable && (plugin.component.scope == "embeddable-decoration") && plugin.component.guiPreview
  - wrapped_embeddable = show_wrapped_embeddable && @embeddable.embeddable
  - wrapped_embeddable_lara_json = wrapped_embeddable ? (LaraSerializationHelper.new).export(wrapped_embeddable).to_json : 'null'
  - if wrapped_embeddable
    - finder = Embeddable::AnswerFinder.new(Run.new())
    - wrapped_embeddable = Embeddable::is_interactive?(wrapped_embeddable) ? wrapped_embeddable : finder.find_answer(wrapped_embeddable)
  - click_to_play = !!(wrapped_embeddable && wrapped_embeddable.respond_to?(:click_to_play) && wrapped_embeddable.click_to_play)
  - firebase_jwt_url = api_v1_get_firebase_jwt_url({firebase_app: '_FIREBASE_APP_'})

  -# load runtime theme for preview of wrapped embeddable
  - if @embeddable
    %h1{style: "font-size: 1.5em; font-weight: bold; margin-bottom: 1em;"}
      = @embeddable.name

    = form_for @embeddable do |f|
      = f.error_messages
      %div{style: ""}
        - if show_wrapped_embeddable
          .wrapped-embeddable.questions-mod{id: wrapped_id}
            .question{ class: question_css_class(wrapped_embeddable) }
              -# The embeddable-root class is important it is used for sizing calculations.
              -# in this particular case the sizing calculations might not apply, but it is kept for consistency
              .embeddable-root
                -# The embeddable-container class is important, it is referenced by plugins and passed to a plugin instance.
                .embeddable-container
                  - if Embeddable::is_interactive?(wrapped_embeddable)
                    = render_interactive(wrapped_embeddable)
                  - else
                    - partial_name = "#{wrapped_embeddable.class.name.underscore.pluralize}/lightweight"
                    = render(partial: partial_name, locals: { embeddable: wrapped_embeddable })
          -# The authored UI of the plugin is injected in this plugin-output div.
          -# The plugin also receives the question-mod block above as the wrapped embeddable
          -# container. This approach doesn't match the dom structure at runtime, but it does provide
          -# a basic preview. A better approach would be to give the plugin an independent dom element
          -# for its authoring UI, and then also a dom element for it is preview content, plus
          -# a dom element for the actual wrapped content. This would let us setup the preview
          -# in a way that matches the runtime. We might even be able to to use the runtime partials
          -#  app/views/interactive_pages/_list_embeddables.html.haml or
          -#  app/views/interactive_pages/_interactive.html.haml
          -# reload-on-close is used so that the css loaded during the the preview is cleaned up
          -# by reloading the browser window even if the user just cancels the dialog
          .plugin-output.content-mod.reload-on-close{id: output_id}
        - else
          .plugin-output{id: output_id}
        %div
          = render :partial => 'shared/edit_full_width', :locals => { :f => f }
  - else
    %h1{style: "font-size: 1.5em; font-weight: bold; margin-bottom: 1em;"}
      = plugin.name

    = form_for plugin do |f|
      = f.error_messages
      %div{style: ""}
        .plugin-output{id: output_id}

  - runtime_div_selector = "##{output_id}"
  - wrapped_div_selector = "##{wrapped_id}"
  - userInfo = current_user.nil? ? {loggedIn: false, authProvider: nil, email: nil} : {loggedIn: true, authProvider: (Concord::AuthPortal.url_for_strategy_name(current_user.most_recent_authentication.provider) rescue nil), email: current_user.email}

  :javascript
    // Begin script for #{plugin.name}
    $(document).ready(function() {
      LARA.Plugins.setNextPluginLabel("#{v3_plugin_label}");
      var script = document.createElement("script");
      script.onload = function() {
        // It's impossible to get type checking here, but object below MUST always implement IPluginAuthoringContext interface
        var pluginContext = {
          type: 'authoring',
          name: '#{plugin.name}',
          url: '#{plugin.url}',
          pluginId: #{plugin.id},
          componentLabel: '#{plugin.component.label}',
          authoredState: #{plugin.author_data ? "'#{ escape_javascript(plugin.author_data) }'" : 'null'},
          container: $('#{runtime_div_selector}')[0],
          wrappedEmbeddable: #{!wrapped_embeddable ? 'null' : "{
            container: $('#{wrapped_div_selector}')[0],
            laraJson: #{wrapped_embeddable_lara_json},
            interactiveStateUrl: null,
            interactiveAvailable: #{!click_to_play}
          }"},
          authorDataSaveUrl: `#{escape_javascript(api_v1_update_plugin_author_data_url(plugin.id))}`,
          firebaseJwtUrl: '#{escape_javascript(firebase_jwt_url)}'
        }
        console.log("Adding #{plugin.name} authoring plugin as #{v3_plugin_label} with V3 LARA Plugin API")
        LARA.Plugins.initPlugin('#{v3_plugin_label}', pluginContext);
        if ($('#wrapped_embeddable').length > 0) {
          var interactiveContainer = $('#wrapped_embeddable').find('.interactive-container')[0];
          LARA.PageItemAuthoring.renderInteractiveAuthoringPreview(interactiveContainer, {
            interactive: #{wrapped_embeddable && defined?(wrapped_embeddable.to_authoring_preview_hash) ? wrapped_embeddable.to_authoring_preview_hash().to_json : 'null'},
            user: #{userInfo.to_json}
          });
        }
      };
      script.onerror = function () {
        alert("Unable to load plugin script: #{plugin.url}");
      };
      script.src = '#{plugin.url}';
      document.head.append(script);
    });

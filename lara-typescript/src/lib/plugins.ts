import { IPluginConstructor } from "../plugin-api";
import { IPluginContext, generatePluginRuntimeContext } from "./plugin-runtime-context";

const pluginError = (e: string, other: any) => {
  // tslint:disable-next-line:no-console
  console.group("LARA Plugin Error");
  // tslint:disable-next-line:no-console
  console.error(e);
  // tslint:disable-next-line:no-console
  console.dir(other);
  // tslint:disable-next-line:no-console
  console.groupEnd();
};

/** @hidden Note, we call these `classes` but any constructor function will do. */
const pluginClasses: { [label: string]: IPluginConstructor } = {};

/****************************************************************************
 Note that this method is NOT meant to be called by plugins. It's used by LARA internals.
 This method is called to initialize the plugin.
 Called at runtime by LARA to create an instance of the plugin as would happen in `views/plugin/_show.html.haml`.
 @param label The the script identifier.
 @param context Initial plugin context generated by LARA. Will be transformed into IPluginRuntimeContext instance.
 ****************************************************************************/
export const initPlugin = (label: string, context: IPluginContext) => {
  const Constructor: IPluginConstructor = pluginClasses[label];
  if (typeof Constructor === "function") {
    try {
      const plugin = new Constructor(generatePluginRuntimeContext(context));
    } catch (e) {
      pluginError(e, context);
    }
    // tslint:disable-next-line:no-console
    console.info("Plugin", label, "is now registered");
  } else {
    // tslint:disable-next-line:no-console
    console.error("No plugin registered for label:", label);
  }
};

/****************************************************************************
 Register a new external script as `label` with `_class `, e.g.:
 ```
 registerPlugin('debugger', Dubugger)
 ```
 @param label The identifier of the script.
 @param _class The Plugin class/constructor being associated with the identifier.
 @returns `true` if plugin was registered correctly.
 ***************************************************************************/
export const registerPlugin = (label: string, _class: IPluginConstructor): boolean => {
  if (typeof _class !== "function") {
    // tslint:disable-next-line:no-console
    console.error("Plugin did not provide constructor", label);
    return false;
  }
  if (pluginClasses[label]) {
    // tslint:disable-next-line:no-console
    console.error("Duplicate Plugin for label", label);
    return false;
  } else {
    pluginClasses[label] = _class;
    return true;
  }
};

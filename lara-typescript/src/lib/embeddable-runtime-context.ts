import {
  IClickToPlayStartedEvent,
  IClickToPlayStartedEventHandler,
  IEmbeddableRuntimeContext, IInteractiveState
} from "../plugin-api";
import { onClickToPlayStarted } from "./events";

/** Data generated by LARA, passed to .initPlugin function, and then used to generate final IEmbeddableRuntimeContext */
export interface IEmbeddableContext {
  /** Embeddable container. */
  container: HTMLElement;
  /****************************************************************************
   Serialized form of the embeddable. Defined by LARA export code, so it's format cannot be specified here.
   Example (interactive):
   ```
   {
     aspect_ratio_method: "DEFAULT",
     authored_state: null,
     click_to_play: false,
     enable_learner_state: true,
     name: "Test Interactive",
     native_height: 435,
     native_width: 576,
     url: "http://concord-consortium.github.io/lara-interactive-api/iframe.html",
     type: "MwInteractive",
     ref_id: "86-MwInteractive"
   }
   ```
   ****************************************************************************/
  laraJson: any;
  /** Interactive state URL, available only when plugin is wrapping an interactive. */
  interactiveStateUrl: string | null;
  /** DOM id of click to play overlay if enabled. */
  clickToPlayId: string | null;
}

const getInteractiveState = (interactiveStateUrl: string | null): Promise<IInteractiveState> | null => {
  if (!interactiveStateUrl) {
    return null;
  }
  return fetch(interactiveStateUrl, {method: "get", credentials: "include"}).then(resp => resp.json());
};

const getReportingUrl = (
  interactiveStateUrl: string | null,
  interactiveStatePromise?: Promise<IInteractiveState>
): Promise<string | null> | null => {
  if (!interactiveStateUrl) {
    return null;
  }
  if (!interactiveStatePromise) {
    interactiveStatePromise = getInteractiveState(interactiveStateUrl)!;
  }
  return interactiveStatePromise.then(interactiveState => {
    try {
      const rawJSON = JSON.parse(interactiveState.raw_data);
      if (rawJSON && rawJSON.lara_options && rawJSON.lara_options.reporting_url) {
        return rawJSON.lara_options.reporting_url;
      }
      return null;
    }
    catch (error) {
      // tslint:disable-next-line:no-console
      console.error(error);
      return null;
    }
  });
};

export const generateEmbeddableRuntimeContext = (context: IEmbeddableContext): IEmbeddableRuntimeContext => {
  return {
    container: context.container,
    laraJson: context.laraJson,
    getInteractiveState: () => getInteractiveState(context.interactiveStateUrl),
    getReportingUrl: (getInteractiveStatePromise?: Promise<IInteractiveState>) =>
      getReportingUrl(context.interactiveStateUrl, getInteractiveStatePromise),
    clickToPlayId: context.clickToPlayId,
    onClickToPlayStarted: (handler: IClickToPlayStartedEventHandler) => {
      // Add generic listener and filter events to limit them just to this given embeddable.
      onClickToPlayStarted((event: IClickToPlayStartedEvent) => {
        if (event.container === context.container) {
          handler(event);
        }
      });
    }
  };
};

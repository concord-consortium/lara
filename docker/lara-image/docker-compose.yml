#
# This docker-compose.yml runs a production image (or other built image)
# for LARA.
#
# It uses dynamically assigned ports so they won't conflict with other 
# services you might have running. 
# You can use `docker-compose port app 80` to find the UI port or
# if you have dinghy-http-proxy installed you can point your browser
# at app.laraimage.docker
#
# NOTE if this is your first time running the production image in a 
# local docker container, you will need to create the database tables.
# To create database tables, prior to initially 
# running "docker-compose up" you should run:
# "docker-compose run app rake db:setup"
#
version: '2.1'
services:
  app:
    #
    # To use a different tag, create an .env file with LARA_IMAGE_TAG defined
    #
    image: concordconsortium/lara:${LARA_IMAGE_TAG:-latest}
    environment:
      DB_HOST: db
      DB_USER: master
      DB_PASSWORD: master
      DB_NAME: lara
      SECRET_TOKEN: b30c94c7-81b7-4f20-8df9-686b079a616a
    ports:
    - '80'
    command: bash -c "rm /lara/tmp/unicorn.pid; ./docker/prod/run.sh"
    #
    # For debugging, a command to start the container without starting 
    # any services. (Just runs bash without exiting. Equivalent to
    # "docker run -it ..." but you have to connect to the container
    # with separate "docker-compose exec ..." commands.)
    #
    # stdin_open: true
    # tty: true
    # command: bash 
    #
    depends_on:
      - db
  db:
    image: mysql:5.6
    environment:
      MYSQL_DATABASE: lara
      MYSQL_PASSWORD: master
      MYSQL_USER: master
      MYSQL_ROOT_PASSWORD: xyzzy
    command: mysqld --character-set-server=utf8 --collation-server=utf8_general_ci
    volumes:
      #
      # use a named volume here so the database is preserved after a down and up
      #
      - mysql:/var/lib/mysql
volumes:
  mysql:

